#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcWatchStore.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WatchStoreManegerDb")]
	public partial class dbWatchStoreManegerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertChiTietDatHang(ChiTietDatHang instance);
    partial void UpdateChiTietDatHang(ChiTietDatHang instance);
    partial void DeleteChiTietDatHang(ChiTietDatHang instance);
    partial void InsertDonHang(DonHang instance);
    partial void UpdateDonHang(DonHang instance);
    partial void DeleteDonHang(DonHang instance);
    partial void InsertKhachHang(KhachHang instance);
    partial void UpdateKhachHang(KhachHang instance);
    partial void DeleteKhachHang(KhachHang instance);
    partial void InsertThich(Thich instance);
    partial void UpdateThich(Thich instance);
    partial void DeleteThich(Thich instance);
    partial void InsertTimKiem(TimKiem instance);
    partial void UpdateTimKiem(TimKiem instance);
    partial void DeleteTimKiem(TimKiem instance);
    partial void InsertChiTietDongHo(ChiTietDongHo instance);
    partial void UpdateChiTietDongHo(ChiTietDongHo instance);
    partial void DeleteChiTietDongHo(ChiTietDongHo instance);
    partial void InsertWATCH(WATCH instance);
    partial void UpdateWATCH(WATCH instance);
    partial void DeleteWATCH(WATCH instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertHinhChiTietDongHo(HinhChiTietDongHo instance);
    partial void UpdateHinhChiTietDongHo(HinhChiTietDongHo instance);
    partial void DeleteHinhChiTietDongHo(HinhChiTietDongHo instance);
    #endregion
		
		public dbWatchStoreManegerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["WatchStoreManegerDbConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbWatchStoreManegerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbWatchStoreManegerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbWatchStoreManegerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbWatchStoreManegerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<ChiTietDatHang> ChiTietDatHangs
		{
			get
			{
				return this.GetTable<ChiTietDatHang>();
			}
		}
		
		public System.Data.Linq.Table<DonHang> DonHangs
		{
			get
			{
				return this.GetTable<DonHang>();
			}
		}
		
		public System.Data.Linq.Table<KhachHang> KhachHangs
		{
			get
			{
				return this.GetTable<KhachHang>();
			}
		}
		
		public System.Data.Linq.Table<Thich> Thiches
		{
			get
			{
				return this.GetTable<Thich>();
			}
		}
		
		public System.Data.Linq.Table<TimKiem> TimKiems
		{
			get
			{
				return this.GetTable<TimKiem>();
			}
		}
		
		public System.Data.Linq.Table<ChiTietDongHo> ChiTietDongHos
		{
			get
			{
				return this.GetTable<ChiTietDongHo>();
			}
		}
		
		public System.Data.Linq.Table<WATCH> WATCHes
		{
			get
			{
				return this.GetTable<WATCH>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<HinhChiTietDongHo> HinhChiTietDongHos
		{
			get
			{
				return this.GetTable<HinhChiTietDongHo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdBrand;
		
		private string _BrandName;
		
		private EntitySet<WATCH> _WATCHes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdBrandChanging(int value);
    partial void OnIdBrandChanged();
    partial void OnBrandNameChanging(string value);
    partial void OnBrandNameChanged();
    #endregion
		
		public Brand()
		{
			this._WATCHes = new EntitySet<WATCH>(new Action<WATCH>(this.attach_WATCHes), new Action<WATCH>(this.detach_WATCHes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBrand", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdBrand
		{
			get
			{
				return this._IdBrand;
			}
			set
			{
				if ((this._IdBrand != value))
				{
					this.OnIdBrandChanging(value);
					this.SendPropertyChanging();
					this._IdBrand = value;
					this.SendPropertyChanged("IdBrand");
					this.OnIdBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrandName", DbType="NVarChar(50)")]
		public string BrandName
		{
			get
			{
				return this._BrandName;
			}
			set
			{
				if ((this._BrandName != value))
				{
					this.OnBrandNameChanging(value);
					this.SendPropertyChanging();
					this._BrandName = value;
					this.SendPropertyChanged("BrandName");
					this.OnBrandNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_WATCH", Storage="_WATCHes", ThisKey="IdBrand", OtherKey="IdBrand")]
		public EntitySet<WATCH> WATCHes
		{
			get
			{
				return this._WATCHes;
			}
			set
			{
				this._WATCHes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WATCHes(WATCH entity)
		{
			this.SendPropertyChanging();
			entity.Brand = this;
		}
		
		private void detach_WATCHes(WATCH entity)
		{
			this.SendPropertyChanging();
			entity.Brand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChiTietDatHang")]
	public partial class ChiTietDatHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDonHang;
		
		private int _IdWatch;
		
		private System.Nullable<int> _Number;
		
		private System.Nullable<decimal> _Cost;
		
		private EntityRef<DonHang> _DonHang;
		
		private EntityRef<WATCH> _WATCH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDonHangChanging(int value);
    partial void OnIdDonHangChanged();
    partial void OnIdWatchChanging(int value);
    partial void OnIdWatchChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    #endregion
		
		public ChiTietDatHang()
		{
			this._DonHang = default(EntityRef<DonHang>);
			this._WATCH = default(EntityRef<WATCH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDonHang", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdDonHang
		{
			get
			{
				return this._IdDonHang;
			}
			set
			{
				if ((this._IdDonHang != value))
				{
					if (this._DonHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdDonHangChanging(value);
					this.SendPropertyChanging();
					this._IdDonHang = value;
					this.SendPropertyChanged("IdDonHang");
					this.OnIdDonHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWatch", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdWatch
		{
			get
			{
				return this._IdWatch;
			}
			set
			{
				if ((this._IdWatch != value))
				{
					if (this._WATCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWatchChanging(value);
					this.SendPropertyChanging();
					this._IdWatch = value;
					this.SendPropertyChanged("IdWatch");
					this.OnIdWatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonHang_ChiTietDatHang", Storage="_DonHang", ThisKey="IdDonHang", OtherKey="IdDonHang", IsForeignKey=true)]
		public DonHang DonHang
		{
			get
			{
				return this._DonHang.Entity;
			}
			set
			{
				DonHang previousValue = this._DonHang.Entity;
				if (((previousValue != value) 
							|| (this._DonHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DonHang.Entity = null;
						previousValue.ChiTietDatHangs.Remove(this);
					}
					this._DonHang.Entity = value;
					if ((value != null))
					{
						value.ChiTietDatHangs.Add(this);
						this._IdDonHang = value.IdDonHang;
					}
					else
					{
						this._IdDonHang = default(int);
					}
					this.SendPropertyChanged("DonHang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_ChiTietDatHang", Storage="_WATCH", ThisKey="IdWatch", OtherKey="IdWatch", IsForeignKey=true)]
		public WATCH WATCH
		{
			get
			{
				return this._WATCH.Entity;
			}
			set
			{
				WATCH previousValue = this._WATCH.Entity;
				if (((previousValue != value) 
							|| (this._WATCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WATCH.Entity = null;
						previousValue.ChiTietDatHangs.Remove(this);
					}
					this._WATCH.Entity = value;
					if ((value != null))
					{
						value.ChiTietDatHangs.Add(this);
						this._IdWatch = value.IdWatch;
					}
					else
					{
						this._IdWatch = default(int);
					}
					this.SendPropertyChanged("WATCH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DonHang")]
	public partial class DonHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdDonHang;
		
		private System.Nullable<int> _IdUser;
		
		private System.Nullable<System.DateTime> _NgayDH;
		
		private System.Nullable<System.DateTime> _NgayGiao;
		
		private System.Nullable<bool> _DaThanhToan;
		
		private System.Nullable<bool> _TinhTrangGiao;
		
		private EntitySet<ChiTietDatHang> _ChiTietDatHangs;
		
		private EntityRef<KhachHang> _KhachHang;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdDonHangChanging(int value);
    partial void OnIdDonHangChanged();
    partial void OnIdUserChanging(System.Nullable<int> value);
    partial void OnIdUserChanged();
    partial void OnNgayDHChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayDHChanged();
    partial void OnNgayGiaoChanging(System.Nullable<System.DateTime> value);
    partial void OnNgayGiaoChanged();
    partial void OnDaThanhToanChanging(System.Nullable<bool> value);
    partial void OnDaThanhToanChanged();
    partial void OnTinhTrangGiaoChanging(System.Nullable<bool> value);
    partial void OnTinhTrangGiaoChanged();
    #endregion
		
		public DonHang()
		{
			this._ChiTietDatHangs = new EntitySet<ChiTietDatHang>(new Action<ChiTietDatHang>(this.attach_ChiTietDatHangs), new Action<ChiTietDatHang>(this.detach_ChiTietDatHangs));
			this._KhachHang = default(EntityRef<KhachHang>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdDonHang", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdDonHang
		{
			get
			{
				return this._IdDonHang;
			}
			set
			{
				if ((this._IdDonHang != value))
				{
					this.OnIdDonHangChanging(value);
					this.SendPropertyChanging();
					this._IdDonHang = value;
					this.SendPropertyChanged("IdDonHang");
					this.OnIdDonHangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int")]
		public System.Nullable<int> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._KhachHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayDH", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayDH
		{
			get
			{
				return this._NgayDH;
			}
			set
			{
				if ((this._NgayDH != value))
				{
					this.OnNgayDHChanging(value);
					this.SendPropertyChanging();
					this._NgayDH = value;
					this.SendPropertyChanged("NgayDH");
					this.OnNgayDHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NgayGiao", DbType="DateTime")]
		public System.Nullable<System.DateTime> NgayGiao
		{
			get
			{
				return this._NgayGiao;
			}
			set
			{
				if ((this._NgayGiao != value))
				{
					this.OnNgayGiaoChanging(value);
					this.SendPropertyChanging();
					this._NgayGiao = value;
					this.SendPropertyChanged("NgayGiao");
					this.OnNgayGiaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaThanhToan", DbType="Bit")]
		public System.Nullable<bool> DaThanhToan
		{
			get
			{
				return this._DaThanhToan;
			}
			set
			{
				if ((this._DaThanhToan != value))
				{
					this.OnDaThanhToanChanging(value);
					this.SendPropertyChanging();
					this._DaThanhToan = value;
					this.SendPropertyChanged("DaThanhToan");
					this.OnDaThanhToanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TinhTrangGiao", DbType="Bit")]
		public System.Nullable<bool> TinhTrangGiao
		{
			get
			{
				return this._TinhTrangGiao;
			}
			set
			{
				if ((this._TinhTrangGiao != value))
				{
					this.OnTinhTrangGiaoChanging(value);
					this.SendPropertyChanging();
					this._TinhTrangGiao = value;
					this.SendPropertyChanged("TinhTrangGiao");
					this.OnTinhTrangGiaoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DonHang_ChiTietDatHang", Storage="_ChiTietDatHangs", ThisKey="IdDonHang", OtherKey="IdDonHang")]
		public EntitySet<ChiTietDatHang> ChiTietDatHangs
		{
			get
			{
				return this._ChiTietDatHangs;
			}
			set
			{
				this._ChiTietDatHangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DonHang", Storage="_KhachHang", ThisKey="IdUser", OtherKey="IdKH", IsForeignKey=true)]
		public KhachHang KhachHang
		{
			get
			{
				return this._KhachHang.Entity;
			}
			set
			{
				KhachHang previousValue = this._KhachHang.Entity;
				if (((previousValue != value) 
							|| (this._KhachHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhachHang.Entity = null;
						previousValue.DonHangs.Remove(this);
					}
					this._KhachHang.Entity = value;
					if ((value != null))
					{
						value.DonHangs.Add(this);
						this._IdUser = value.IdKH;
					}
					else
					{
						this._IdUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("KhachHang");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChiTietDatHangs(ChiTietDatHang entity)
		{
			this.SendPropertyChanging();
			entity.DonHang = this;
		}
		
		private void detach_ChiTietDatHangs(ChiTietDatHang entity)
		{
			this.SendPropertyChanging();
			entity.DonHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.KhachHang")]
	public partial class KhachHang : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdKH;
		
		private string _Name;
		
		private string _UserName;
		
		private string _Pass;
		
		private string _Email;
		
		private string _Address;
		
		private string _Phone;
		
		private System.Nullable<System.DateTime> _Birth;
		
		private EntitySet<DonHang> _DonHangs;
		
		private EntitySet<Thich> _Thiches;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdKHChanging(int value);
    partial void OnIdKHChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthChanged();
    #endregion
		
		public KhachHang()
		{
			this._DonHangs = new EntitySet<DonHang>(new Action<DonHang>(this.attach_DonHangs), new Action<DonHang>(this.detach_DonHangs));
			this._Thiches = new EntitySet<Thich>(new Action<Thich>(this.attach_Thiches), new Action<Thich>(this.detach_Thiches));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdKH", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdKH
		{
			get
			{
				return this._IdKH;
			}
			set
			{
				if ((this._IdKH != value))
				{
					this.OnIdKHChanging(value);
					this.SendPropertyChanging();
					this._IdKH = value;
					this.SendPropertyChanged("IdKH");
					this.OnIdKHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(50)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birth", DbType="DateTime")]
		public System.Nullable<System.DateTime> Birth
		{
			get
			{
				return this._Birth;
			}
			set
			{
				if ((this._Birth != value))
				{
					this.OnBirthChanging(value);
					this.SendPropertyChanging();
					this._Birth = value;
					this.SendPropertyChanged("Birth");
					this.OnBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_DonHang", Storage="_DonHangs", ThisKey="IdKH", OtherKey="IdUser")]
		public EntitySet<DonHang> DonHangs
		{
			get
			{
				return this._DonHangs;
			}
			set
			{
				this._DonHangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_Thich", Storage="_Thiches", ThisKey="IdKH", OtherKey="IdUser")]
		public EntitySet<Thich> Thiches
		{
			get
			{
				return this._Thiches;
			}
			set
			{
				this._Thiches.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DonHangs(DonHang entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = this;
		}
		
		private void detach_DonHangs(DonHang entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = null;
		}
		
		private void attach_Thiches(Thich entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = this;
		}
		
		private void detach_Thiches(Thich entity)
		{
			this.SendPropertyChanging();
			entity.KhachHang = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Thich")]
	public partial class Thich : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdThich;
		
		private System.Nullable<int> _IdUser;
		
		private System.Nullable<int> _IdWatch;
		
		private System.Nullable<int> _LuotThich;
		
		private EntityRef<KhachHang> _KhachHang;
		
		private EntityRef<WATCH> _WATCH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdThichChanging(int value);
    partial void OnIdThichChanged();
    partial void OnIdUserChanging(System.Nullable<int> value);
    partial void OnIdUserChanged();
    partial void OnIdWatchChanging(System.Nullable<int> value);
    partial void OnIdWatchChanged();
    partial void OnLuotThichChanging(System.Nullable<int> value);
    partial void OnLuotThichChanged();
    #endregion
		
		public Thich()
		{
			this._KhachHang = default(EntityRef<KhachHang>);
			this._WATCH = default(EntityRef<WATCH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdThich", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdThich
		{
			get
			{
				return this._IdThich;
			}
			set
			{
				if ((this._IdThich != value))
				{
					this.OnIdThichChanging(value);
					this.SendPropertyChanging();
					this._IdThich = value;
					this.SendPropertyChanged("IdThich");
					this.OnIdThichChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int")]
		public System.Nullable<int> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._KhachHang.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWatch", DbType="Int")]
		public System.Nullable<int> IdWatch
		{
			get
			{
				return this._IdWatch;
			}
			set
			{
				if ((this._IdWatch != value))
				{
					if (this._WATCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWatchChanging(value);
					this.SendPropertyChanging();
					this._IdWatch = value;
					this.SendPropertyChanged("IdWatch");
					this.OnIdWatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LuotThich", DbType="Int")]
		public System.Nullable<int> LuotThich
		{
			get
			{
				return this._LuotThich;
			}
			set
			{
				if ((this._LuotThich != value))
				{
					this.OnLuotThichChanging(value);
					this.SendPropertyChanging();
					this._LuotThich = value;
					this.SendPropertyChanged("LuotThich");
					this.OnLuotThichChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="KhachHang_Thich", Storage="_KhachHang", ThisKey="IdUser", OtherKey="IdKH", IsForeignKey=true)]
		public KhachHang KhachHang
		{
			get
			{
				return this._KhachHang.Entity;
			}
			set
			{
				KhachHang previousValue = this._KhachHang.Entity;
				if (((previousValue != value) 
							|| (this._KhachHang.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._KhachHang.Entity = null;
						previousValue.Thiches.Remove(this);
					}
					this._KhachHang.Entity = value;
					if ((value != null))
					{
						value.Thiches.Add(this);
						this._IdUser = value.IdKH;
					}
					else
					{
						this._IdUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("KhachHang");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_Thich", Storage="_WATCH", ThisKey="IdWatch", OtherKey="IdWatch", IsForeignKey=true)]
		public WATCH WATCH
		{
			get
			{
				return this._WATCH.Entity;
			}
			set
			{
				WATCH previousValue = this._WATCH.Entity;
				if (((previousValue != value) 
							|| (this._WATCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WATCH.Entity = null;
						previousValue.Thiches.Remove(this);
					}
					this._WATCH.Entity = value;
					if ((value != null))
					{
						value.Thiches.Add(this);
						this._IdWatch = value.IdWatch;
					}
					else
					{
						this._IdWatch = default(Nullable<int>);
					}
					this.SendPropertyChanged("WATCH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimKiem")]
	public partial class TimKiem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Key;
		
		private System.Nullable<int> _SoLan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnSoLanChanging(System.Nullable<int> value);
    partial void OnSoLanChanged();
    #endregion
		
		public TimKiem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(50)")]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SoLan", DbType="Int")]
		public System.Nullable<int> SoLan
		{
			get
			{
				return this._SoLan;
			}
			set
			{
				if ((this._SoLan != value))
				{
					this.OnSoLanChanging(value);
					this.SendPropertyChanging();
					this._SoLan = value;
					this.SendPropertyChanged("SoLan");
					this.OnSoLanChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChiTietDongHo")]
	public partial class ChiTietDongHo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdChiTietDongHo;
		
		private System.Nullable<int> _IdWatch;
		
		private System.Nullable<int> _BaoHanh;
		
		private string _XuatXu;
		
		private System.Nullable<int> _Tinhtrang;
		
		private string _Mota;
		
		private EntityRef<WATCH> _WATCH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChiTietDongHoChanging(int value);
    partial void OnIdChiTietDongHoChanged();
    partial void OnIdWatchChanging(System.Nullable<int> value);
    partial void OnIdWatchChanged();
    partial void OnBaoHanhChanging(System.Nullable<int> value);
    partial void OnBaoHanhChanged();
    partial void OnXuatXuChanging(string value);
    partial void OnXuatXuChanged();
    partial void OnTinhtrangChanging(System.Nullable<int> value);
    partial void OnTinhtrangChanged();
    partial void OnMotaChanging(string value);
    partial void OnMotaChanged();
    #endregion
		
		public ChiTietDongHo()
		{
			this._WATCH = default(EntityRef<WATCH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdChiTietDongHo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdChiTietDongHo
		{
			get
			{
				return this._IdChiTietDongHo;
			}
			set
			{
				if ((this._IdChiTietDongHo != value))
				{
					this.OnIdChiTietDongHoChanging(value);
					this.SendPropertyChanging();
					this._IdChiTietDongHo = value;
					this.SendPropertyChanged("IdChiTietDongHo");
					this.OnIdChiTietDongHoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWatch", DbType="Int")]
		public System.Nullable<int> IdWatch
		{
			get
			{
				return this._IdWatch;
			}
			set
			{
				if ((this._IdWatch != value))
				{
					if (this._WATCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWatchChanging(value);
					this.SendPropertyChanging();
					this._IdWatch = value;
					this.SendPropertyChanged("IdWatch");
					this.OnIdWatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaoHanh", DbType="Int")]
		public System.Nullable<int> BaoHanh
		{
			get
			{
				return this._BaoHanh;
			}
			set
			{
				if ((this._BaoHanh != value))
				{
					this.OnBaoHanhChanging(value);
					this.SendPropertyChanging();
					this._BaoHanh = value;
					this.SendPropertyChanged("BaoHanh");
					this.OnBaoHanhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XuatXu", DbType="NVarChar(50)")]
		public string XuatXu
		{
			get
			{
				return this._XuatXu;
			}
			set
			{
				if ((this._XuatXu != value))
				{
					this.OnXuatXuChanging(value);
					this.SendPropertyChanging();
					this._XuatXu = value;
					this.SendPropertyChanged("XuatXu");
					this.OnXuatXuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tinhtrang", DbType="Int")]
		public System.Nullable<int> Tinhtrang
		{
			get
			{
				return this._Tinhtrang;
			}
			set
			{
				if ((this._Tinhtrang != value))
				{
					this.OnTinhtrangChanging(value);
					this.SendPropertyChanging();
					this._Tinhtrang = value;
					this.SendPropertyChanged("Tinhtrang");
					this.OnTinhtrangChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mota", DbType="NVarChar(MAX)")]
		public string Mota
		{
			get
			{
				return this._Mota;
			}
			set
			{
				if ((this._Mota != value))
				{
					this.OnMotaChanging(value);
					this.SendPropertyChanging();
					this._Mota = value;
					this.SendPropertyChanged("Mota");
					this.OnMotaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_ChiTietDongHo", Storage="_WATCH", ThisKey="IdWatch", OtherKey="IdWatch", IsForeignKey=true)]
		public WATCH WATCH
		{
			get
			{
				return this._WATCH.Entity;
			}
			set
			{
				WATCH previousValue = this._WATCH.Entity;
				if (((previousValue != value) 
							|| (this._WATCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WATCH.Entity = null;
						previousValue.ChiTietDongHos.Remove(this);
					}
					this._WATCH.Entity = value;
					if ((value != null))
					{
						value.ChiTietDongHos.Add(this);
						this._IdWatch = value.IdWatch;
					}
					else
					{
						this._IdWatch = default(Nullable<int>);
					}
					this.SendPropertyChanged("WATCH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WATCH")]
	public partial class WATCH : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdWatch;
		
		private string _WatchName;
		
		private string _Img;
		
		private System.Nullable<decimal> _Cost;
		
		private System.Nullable<System.DateTime> _DateUp;
		
		private System.Nullable<int> _number;
		
		private System.Nullable<int> _IdBrand;
		
		private EntitySet<ChiTietDatHang> _ChiTietDatHangs;
		
		private EntitySet<Thich> _Thiches;
		
		private EntitySet<ChiTietDongHo> _ChiTietDongHos;
		
		private EntitySet<HinhChiTietDongHo> _HinhChiTietDongHos;
		
		private EntityRef<Brand> _Brand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdWatchChanging(int value);
    partial void OnIdWatchChanged();
    partial void OnWatchNameChanging(string value);
    partial void OnWatchNameChanged();
    partial void OnImgChanging(string value);
    partial void OnImgChanged();
    partial void OnCostChanging(System.Nullable<decimal> value);
    partial void OnCostChanged();
    partial void OnDateUpChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUpChanged();
    partial void OnnumberChanging(System.Nullable<int> value);
    partial void OnnumberChanged();
    partial void OnIdBrandChanging(System.Nullable<int> value);
    partial void OnIdBrandChanged();
    #endregion
		
		public WATCH()
		{
			this._ChiTietDatHangs = new EntitySet<ChiTietDatHang>(new Action<ChiTietDatHang>(this.attach_ChiTietDatHangs), new Action<ChiTietDatHang>(this.detach_ChiTietDatHangs));
			this._Thiches = new EntitySet<Thich>(new Action<Thich>(this.attach_Thiches), new Action<Thich>(this.detach_Thiches));
			this._ChiTietDongHos = new EntitySet<ChiTietDongHo>(new Action<ChiTietDongHo>(this.attach_ChiTietDongHos), new Action<ChiTietDongHo>(this.detach_ChiTietDongHos));
			this._HinhChiTietDongHos = new EntitySet<HinhChiTietDongHo>(new Action<HinhChiTietDongHo>(this.attach_HinhChiTietDongHos), new Action<HinhChiTietDongHo>(this.detach_HinhChiTietDongHos));
			this._Brand = default(EntityRef<Brand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWatch", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdWatch
		{
			get
			{
				return this._IdWatch;
			}
			set
			{
				if ((this._IdWatch != value))
				{
					this.OnIdWatchChanging(value);
					this.SendPropertyChanging();
					this._IdWatch = value;
					this.SendPropertyChanged("IdWatch");
					this.OnIdWatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WatchName", DbType="NVarChar(100)")]
		public string WatchName
		{
			get
			{
				return this._WatchName;
			}
			set
			{
				if ((this._WatchName != value))
				{
					this.OnWatchNameChanging(value);
					this.SendPropertyChanging();
					this._WatchName = value;
					this.SendPropertyChanged("WatchName");
					this.OnWatchNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="VarChar(50)")]
		public string Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cost", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUp", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateUp
		{
			get
			{
				return this._DateUp;
			}
			set
			{
				if ((this._DateUp != value))
				{
					this.OnDateUpChanging(value);
					this.SendPropertyChanging();
					this._DateUp = value;
					this.SendPropertyChanged("DateUp");
					this.OnDateUpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int")]
		public System.Nullable<int> number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdBrand", DbType="Int")]
		public System.Nullable<int> IdBrand
		{
			get
			{
				return this._IdBrand;
			}
			set
			{
				if ((this._IdBrand != value))
				{
					if (this._Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdBrandChanging(value);
					this.SendPropertyChanging();
					this._IdBrand = value;
					this.SendPropertyChanged("IdBrand");
					this.OnIdBrandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_ChiTietDatHang", Storage="_ChiTietDatHangs", ThisKey="IdWatch", OtherKey="IdWatch")]
		public EntitySet<ChiTietDatHang> ChiTietDatHangs
		{
			get
			{
				return this._ChiTietDatHangs;
			}
			set
			{
				this._ChiTietDatHangs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_Thich", Storage="_Thiches", ThisKey="IdWatch", OtherKey="IdWatch")]
		public EntitySet<Thich> Thiches
		{
			get
			{
				return this._Thiches;
			}
			set
			{
				this._Thiches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_ChiTietDongHo", Storage="_ChiTietDongHos", ThisKey="IdWatch", OtherKey="IdWatch")]
		public EntitySet<ChiTietDongHo> ChiTietDongHos
		{
			get
			{
				return this._ChiTietDongHos;
			}
			set
			{
				this._ChiTietDongHos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_HinhChiTietDongHo", Storage="_HinhChiTietDongHos", ThisKey="IdWatch", OtherKey="IdWatch")]
		public EntitySet<HinhChiTietDongHo> HinhChiTietDongHos
		{
			get
			{
				return this._HinhChiTietDongHos;
			}
			set
			{
				this._HinhChiTietDongHos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_WATCH", Storage="_Brand", ThisKey="IdBrand", OtherKey="IdBrand", IsForeignKey=true)]
		public Brand Brand
		{
			get
			{
				return this._Brand.Entity;
			}
			set
			{
				Brand previousValue = this._Brand.Entity;
				if (((previousValue != value) 
							|| (this._Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brand.Entity = null;
						previousValue.WATCHes.Remove(this);
					}
					this._Brand.Entity = value;
					if ((value != null))
					{
						value.WATCHes.Add(this);
						this._IdBrand = value.IdBrand;
					}
					else
					{
						this._IdBrand = default(Nullable<int>);
					}
					this.SendPropertyChanged("Brand");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChiTietDatHangs(ChiTietDatHang entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = this;
		}
		
		private void detach_ChiTietDatHangs(ChiTietDatHang entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = null;
		}
		
		private void attach_Thiches(Thich entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = this;
		}
		
		private void detach_Thiches(Thich entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = null;
		}
		
		private void attach_ChiTietDongHos(ChiTietDongHo entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = this;
		}
		
		private void detach_ChiTietDongHos(ChiTietDongHo entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = null;
		}
		
		private void attach_HinhChiTietDongHos(HinhChiTietDongHo entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = this;
		}
		
		private void detach_HinhChiTietDongHos(HinhChiTietDongHo entity)
		{
			this.SendPropertyChanging();
			entity.WATCH = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserAdmin;
		
		private string _PassAdmin;
		
		private string _HoTen;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAdminChanging(string value);
    partial void OnUserAdminChanged();
    partial void OnPassAdminChanging(string value);
    partial void OnPassAdminChanged();
    partial void OnHoTenChanging(string value);
    partial void OnHoTenChanged();
    #endregion
		
		public Admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAdmin", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserAdmin
		{
			get
			{
				return this._UserAdmin;
			}
			set
			{
				if ((this._UserAdmin != value))
				{
					this.OnUserAdminChanging(value);
					this.SendPropertyChanging();
					this._UserAdmin = value;
					this.SendPropertyChanged("UserAdmin");
					this.OnUserAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassAdmin", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PassAdmin
		{
			get
			{
				return this._PassAdmin;
			}
			set
			{
				if ((this._PassAdmin != value))
				{
					this.OnPassAdminChanging(value);
					this.SendPropertyChanging();
					this._PassAdmin = value;
					this.SendPropertyChanged("PassAdmin");
					this.OnPassAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HoTen", DbType="NVarChar(50)")]
		public string HoTen
		{
			get
			{
				return this._HoTen;
			}
			set
			{
				if ((this._HoTen != value))
				{
					this.OnHoTenChanging(value);
					this.SendPropertyChanging();
					this._HoTen = value;
					this.SendPropertyChanged("HoTen");
					this.OnHoTenChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HinhChiTietDongHo")]
	public partial class HinhChiTietDongHo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdHinh;
		
		private System.Nullable<int> _IdWatch;
		
		private string _Img;
		
		private EntityRef<WATCH> _WATCH;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdHinhChanging(int value);
    partial void OnIdHinhChanged();
    partial void OnIdWatchChanging(System.Nullable<int> value);
    partial void OnIdWatchChanged();
    partial void OnImgChanging(string value);
    partial void OnImgChanged();
    #endregion
		
		public HinhChiTietDongHo()
		{
			this._WATCH = default(EntityRef<WATCH>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdHinh", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IdHinh
		{
			get
			{
				return this._IdHinh;
			}
			set
			{
				if ((this._IdHinh != value))
				{
					this.OnIdHinhChanging(value);
					this.SendPropertyChanging();
					this._IdHinh = value;
					this.SendPropertyChanged("IdHinh");
					this.OnIdHinhChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdWatch", DbType="Int")]
		public System.Nullable<int> IdWatch
		{
			get
			{
				return this._IdWatch;
			}
			set
			{
				if ((this._IdWatch != value))
				{
					if (this._WATCH.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdWatchChanging(value);
					this.SendPropertyChanging();
					this._IdWatch = value;
					this.SendPropertyChanged("IdWatch");
					this.OnIdWatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="VarChar(50)")]
		public string Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WATCH_HinhChiTietDongHo", Storage="_WATCH", ThisKey="IdWatch", OtherKey="IdWatch", IsForeignKey=true)]
		public WATCH WATCH
		{
			get
			{
				return this._WATCH.Entity;
			}
			set
			{
				WATCH previousValue = this._WATCH.Entity;
				if (((previousValue != value) 
							|| (this._WATCH.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WATCH.Entity = null;
						previousValue.HinhChiTietDongHos.Remove(this);
					}
					this._WATCH.Entity = value;
					if ((value != null))
					{
						value.HinhChiTietDongHos.Add(this);
						this._IdWatch = value.IdWatch;
					}
					else
					{
						this._IdWatch = default(Nullable<int>);
					}
					this.SendPropertyChanged("WATCH");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
